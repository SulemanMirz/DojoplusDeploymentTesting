/* eslint-disable no-param-reassign */
import { createSlice } from '@reduxjs/toolkit';
import { PlanCategories } from '../../shared/models/school.model';
import { useAppSelector } from '../hooks';
import type { RootState } from '../store';
import { getPlanCategories } from '../thunk/plansThunk';

// here we are typing the types for the state
export type PlansState = {
  data: PlanCategories[];
  loading: boolean;
  error: boolean;
};

const initialState: PlansState = {
  data: [],
  loading: true,
  error: false,
};

export const plansSlice = createSlice({
  name: 'plans',
  initialState,
  reducers: {},
  // The `extraReducers` field lets the slice handle actions defined elsewhere, including actions generated by createAsyncThunk or in other slices.
  // Since this is an API call we have 3 possible outcomes: pending, fulfilled and rejected. We have made allocations for all 3 outcomes.
  // Doing this is good practice as we can tap into the status of the API call and give our users an idea of what's happening in the background.
  extraReducers: (builder) => {
    builder
      .addCase(getPlanCategories.pending, (state) => {
        state.loading = true;
      })
      .addCase(getPlanCategories.fulfilled, (state, { payload }) => {
        // When the API call is successful and we get some data,the data becomes the `fulfilled` action payload
        state.loading = false;
        state.data = payload;
      })
      .addCase(getPlanCategories.rejected, (state) => {
        state.loading = false;
        state.error = true;
      });
  },
});

export const usePlanCategories = (): PlanCategories[] => {
  return useAppSelector((state: RootState) => state.plans.data);
};

export const usePlanLoading = (): boolean => {
  return useAppSelector((state: RootState) => state.plans.loading);
};

export default plansSlice.reducer;
